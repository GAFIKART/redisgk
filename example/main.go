package main

import (
	"fmt"
	"log"
	"time"

	redisgklib "github.com/GAFIKART/redisgk/lib"
)

// User - –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
type User struct {
	ID       int    `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Age      int    `json:"age"`
	IsActive bool   `json:"is_active"`
}

// Product - –µ—â–µ –æ–¥–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
type Product struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Price       float64 `json:"price"`
	Description string  `json:"description"`
	Category    string  `json:"category"`
}

func main() {
	fmt.Println("=== –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ redisgk ===")

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
	config := redisgklib.RedisConfConn{
		Host:     "localhost",
		Port:     6379,
		User:     "",
		Password: "",
		DB:       0,
		AdditionalOptions: redisgklib.RedisAdditionalOptions{
			DialTimeout:  5 * time.Second,
			ReadTimeout:  3 * time.Second,
			WriteTimeout: 3 * time.Second,
			PoolSize:     10,
			PoolTimeout:  30 * time.Second,
			BaseCtx:      10 * time.Second,
		},
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ RedisGk
	redisGk, err := redisgklib.NewRedisGk(config)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: %v", err)
	}
	defer func() {
		if err := redisGk.Close(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %v", err)
		}
	}()

	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –ü—Ä–∏–º–µ—Ä 1: –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
	fmt.Println("=== 1. –†–ê–ë–û–¢–ê –°–û –°–¢–†–û–ö–ê–ú–ò ===")
	demoStrings(redisGk)

	// –ü—Ä–∏–º–µ—Ä 2: –†–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
	fmt.Println("\n=== 2. –†–ê–ë–û–¢–ê –° –û–ë–™–ï–ö–¢–ê–ú–ò ===")
	demoObjects(redisGk)

	// –ü—Ä–∏–º–µ—Ä 3: –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤
	fmt.Println("\n=== 3. –ü–û–ò–°–ö –û–ë–™–ï–ö–¢–û–í ===")
	demoFindObjects(redisGk)

	// –ü—Ä–∏–º–µ—Ä 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π
	fmt.Println("\n=== 4. –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –ö–õ–Æ–ß–ï–ô ===")
	demoExists(redisGk)

	// –ü—Ä–∏–º–µ—Ä 5: –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π
	fmt.Println("\n=== 5. –£–î–ê–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ï–ô ===")
	demoDelete(redisGk)

	fmt.Println("\n=== –í–°–ï –ü–†–ò–ú–ï–†–´ –ó–ê–í–ï–†–®–ï–ù–´ ===")
}

// demoStrings - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
func demoStrings(redisGk *redisgklib.RedisGk) {
	fmt.Println("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏...")

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ TTL
	err := redisGk.SetString([]string{"user", "profile", "name"}, "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: %v", err)
		return
	}
	fmt.Println("‚úÖ –°—Ç—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: user:profile:name = '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤'")

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å TTL
	err = redisGk.SetString([]string{"temp", "session", "token"}, "abc123xyz", 30*time.Second)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å TTL: %v", err)
		return
	}
	fmt.Println("‚úÖ –°—Ç—Ä–æ–∫–∞ —Å TTL —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: temp:session:token = 'abc123xyz' (TTL: 30s)")

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
	value, err := redisGk.GetString([]string{"user", "profile", "name"})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: %v", err)
		return
	}
	fmt.Printf("‚úÖ –°—Ç—Ä–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: %s\n", value)

	// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
	_, err = redisGk.GetString([]string{"nonexistent", "key"})
	if err != nil {
		fmt.Printf("‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞: %v\n", err)
	}
}

// demoObjects - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
func demoObjects(redisGk *redisgklib.RedisGk) {
	fmt.Println("üì¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ User...")

	// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ User
	user := User{
		ID:       1,
		Name:     "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
		Email:    "anna@example.com",
		Age:      28,
		IsActive: true,
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
	err := redisgklib.SetObj(redisGk, []string{"users", "1"}, user)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: %v", err)
		return
	}
	fmt.Println("‚úÖ –û–±—ä–µ–∫—Ç User —Å–æ—Ö—Ä–∞–Ω–µ–Ω: users:1")

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å TTL
	product := Product{
		ID:          "prod_001",
		Name:        "–°–º–∞—Ä—Ç—Ñ–æ–Ω Galaxy S21",
		Price:       89999.99,
		Description: "–ú–æ—â–Ω—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å –æ—Ç–ª–∏—á–Ω–æ–π –∫–∞–º–µ—Ä–æ–π",
		Category:    "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
	}

	err = redisgklib.SetObj(redisGk, []string{"products", "prod_001"}, product, 1*time.Hour)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å TTL: %v", err)
		return
	}
	fmt.Println("‚úÖ –û–±—ä–µ–∫—Ç Product —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å TTL: products:prod_001 (TTL: 1h)")

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ User
	retrievedUser, err := redisgklib.GetObj[User](redisGk, []string{"users", "1"})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ User: %v", err)
		return
	}
	fmt.Printf("‚úÖ –û–±—ä–µ–∫—Ç User –ø–æ–ª—É—á–µ–Ω: ID=%d, Name=%s, Email=%s\n",
		retrievedUser.ID, retrievedUser.Name, retrievedUser.Email)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Product
	retrievedProduct, err := redisgklib.GetObj[Product](redisGk, []string{"products", "prod_001"})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ Product: %v", err)
		return
	}
	fmt.Printf("‚úÖ –û–±—ä–µ–∫—Ç Product –ø–æ–ª—É—á–µ–Ω: ID=%s, Name=%s, Price=%.2f\n",
		retrievedProduct.ID, retrievedProduct.Name, retrievedProduct.Price)
}

// demoFindObjects - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
func demoFindObjects(redisGk *redisgklib.RedisGk) {
	fmt.Println("üîç –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤...")

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
	users := []User{
		{ID: 2, Name: "–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤", Email: "petr@example.com", Age: 35, IsActive: true},
		{ID: 3, Name: "–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞", Email: "maria@example.com", Age: 24, IsActive: false},
		{ID: 4, Name: "–°–µ—Ä–≥–µ–π –í–æ–ª–∫–æ–≤", Email: "sergey@example.com", Age: 42, IsActive: true},
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	for _, user := range users {
		err := redisgklib.SetObj(redisGk, []string{"users", fmt.Sprintf("%d", user.ID)}, user)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", user.ID, err)
			continue
		}
		fmt.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n", user.ID)
	}

	// –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	foundUsers, err := redisgklib.FindObj[User](redisGk, []string{"users"})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return
	}

	fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n", len(foundUsers))
	for key, user := range foundUsers {
		fmt.Printf("   - %s: %s (%s)\n", key, user.Name, user.Email)
	}

	// –ü–æ–∏—Å–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	foundUsersLimited, err := redisgklib.FindObj[User](redisGk, []string{"users"}, 2)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º: %v", err)
		return
	}

	fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 2): %d\n", len(foundUsersLimited))
}

// demoExists - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π
func demoExists(redisGk *redisgklib.RedisGk) {
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π...")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
	exists, err := redisGk.Exists([]string{"users", "1"})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞: %v", err)
		return
	}
	fmt.Printf("‚úÖ –ö–ª—é—á 'users:1' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %t\n", exists)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
	exists, err = redisGk.Exists([]string{"nonexistent", "key"})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞: %v", err)
		return
	}
	fmt.Printf("‚úÖ –ö–ª—é—á 'nonexistent:key' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: %t\n", exists)
}

// demoDelete - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π
func demoDelete(redisGk *redisgklib.RedisGk) {
	fmt.Println("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π...")

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	err := redisGk.SetString([]string{"test", "delete", "key"}, "–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞: %v", err)
		return
	}
	fmt.Println("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω: test:delete:key")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
	exists, err := redisGk.Exists([]string{"test", "delete", "key"})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è: %v", err)
		return
	}
	fmt.Printf("‚úÖ –ö–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º: %t\n", exists)

	// –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
	err = redisGk.Del([]string{"test", "delete", "key"})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞: %v", err)
		return
	}
	fmt.Println("‚úÖ –ö–ª—é—á —É–¥–∞–ª–µ–Ω: test:delete:key")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
	exists, err = redisGk.Exists([]string{"test", "delete", "key"})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è: %v", err)
		return
	}
	fmt.Printf("‚úÖ –ö–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: %t\n", exists)

	// –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π
	fmt.Println("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π...")

	// –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
	err = redisGk.Del(
		[]string{"user", "profile", "name"},
		[]string{"temp", "session", "token"},
		[]string{"users", "1"},
		[]string{"users", "2"},
		[]string{"users", "3"},
		[]string{"users", "4"},
		[]string{"products", "prod_001"},
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π: %v", err)
	} else {
		fmt.Println("‚úÖ –í—Å–µ –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
	}
}
